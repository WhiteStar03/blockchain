import { Chain, IWallet, IWalletAdapter, WalletEvent, WalletEventListeners } from "@suiet/wallet-sdk";
import { SuiReportTransactionEffectsInput, SuiSignAndExecuteTransactionBlockInput, SuiSignAndExecuteTransactionBlockOutput, SuiSignAndExecuteTransactionInput, SuiSignAndExecuteTransactionOutput, SuiSignMessageInput, SuiSignMessageOutput, SuiSignPersonalMessageInput, SuiSignPersonalMessageOutput, SuiSignTransactionBlockInput, SuiSignTransactionBlockOutput, SuiSignTransactionInput, WalletAccount, SignedTransaction } from "@mysten/wallet-standard";
import { ExecuteTransactionOptions } from "../types/params";
export interface WalletContextState {
    configuredWallets: IWallet[];
    detectedWallets: IWallet[];
    allAvailableWallets: IWallet[];
    chains: Chain[];
    chain: Chain | undefined;
    name: string | undefined;
    adapter: IWalletAdapter | undefined;
    account: WalletAccount | undefined;
    address: string | undefined;
    connecting: boolean;
    connected: boolean;
    status: "disconnected" | "connected" | "connecting";
    select: (walletName: string) => Promise<void>;
    disconnect: () => Promise<void>;
    getAccounts: () => readonly WalletAccount[];
    signAndExecuteTransaction<Output extends SuiSignAndExecuteTransactionOutput>(input: Omit<SuiSignAndExecuteTransactionInput, "account" | "chain">, options?: ExecuteTransactionOptions): Promise<Output>;
    signTransaction(input: Omit<SuiSignTransactionInput, "account" | "chain">): Promise<SignedTransaction>;
    signPersonalMessage(input: Omit<SuiSignPersonalMessageInput, "account">): Promise<SuiSignPersonalMessageOutput>;
    /**
     * @deprecated use signTransaction instead
     * @param input
     */
    signTransactionBlock(input: Omit<SuiSignTransactionBlockInput, "account" | "chain">): Promise<SuiSignTransactionBlockOutput>;
    /** @deprecated Use signAndExecuteTransaction instead  */
    signAndExecuteTransactionBlock(input: Omit<SuiSignAndExecuteTransactionBlockInput, "account" | "chain">): Promise<SuiSignAndExecuteTransactionBlockOutput>;
    /**
     * @deprecated use signPersonalMessage instead
     */
    signMessage(input: Omit<SuiSignMessageInput, "account">): Promise<SuiSignMessageOutput>;
    verifySignedMessage(input: SuiSignPersonalMessageOutput | SuiSignMessageOutput, publicKey: Uint8Array): Promise<boolean>;
    on: <E extends WalletEvent>(event: E, listener: WalletEventListeners[E]) => () => void;
    reportTransactionEffects(input: Omit<SuiReportTransactionEffectsInput, "account" | "chain">): Promise<void>;
}
export declare const WalletContext: import("react").Context<WalletContextState>;
export declare function useWallet(): WalletContextState;
